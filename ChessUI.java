/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package chessPairingSoftware;

import chessPairingSoftware.Player.*;
import java.awt.print.PrinterException;
import java.io.*;
import java.util.*;
import static java.util.Objects.isNull;
import javax.swing.*;
import javax.swing.table.*;


/**
 *
 * @author Thomas Wang
 */
public class ChessUI extends javax.swing.JFrame {

    /**
     * Creates new form ChessUI
     */
    public ChessUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    Tournament tournament;
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        JTabbedPane = new javax.swing.JTabbedPane();
        pnlAllPlayers = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAllPlayers = new javax.swing.JTable();
        btnLoadFromFile = new javax.swing.JButton();
        btnSaveToFile = new javax.swing.JButton();
        txtAddNewName = new javax.swing.JTextField();
        txtAddNewRating = new javax.swing.JTextField();
        btnAddPlayerToDatabase = new javax.swing.JButton();
        labelName = new javax.swing.JLabel();
        labelRating = new javax.swing.JLabel();
        btnAddPlayerToTournament = new javax.swing.JButton();
        btnDeletePlayer = new javax.swing.JButton();
        btnEditPlayer = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        pnlPlayers = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTournament = new javax.swing.JTable();
        labelPlayers = new javax.swing.JLabel();
        btnStartNewTournament = new javax.swing.JButton();
        txtRounds = new javax.swing.JTextField();
        lblRounds = new javax.swing.JLabel();
        btnEndTournament = new javax.swing.JButton();
        btnAddAllPlayersToTournament = new javax.swing.JButton();
        checkIsRated = new javax.swing.JCheckBox();
        RemovePlayerFromTournament = new javax.swing.JButton();
        btnLoadTournamentFromFile = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        pnlPairings = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPairings = new javax.swing.JTable();
        btnPair = new javax.swing.JButton();
        btnWhiteWin = new javax.swing.JRadioButton();
        btnBlackWin = new javax.swing.JRadioButton();
        btnDraw = new javax.swing.JRadioButton();
        btnSetResult = new javax.swing.JButton();
        btnEndRound = new javax.swing.JButton();
        pnlStandings = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblStandings = new javax.swing.JTable();
        labelStandingsCurrentRound = new javax.swing.JLabel();
        btnPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblAllPlayers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "ID", "Rating"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAllPlayers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAllPlayersMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblAllPlayers);
        if (tblAllPlayers.getColumnModel().getColumnCount() > 0) {
            tblAllPlayers.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblAllPlayers.getColumnModel().getColumn(1).setPreferredWidth(50);
        }

        btnLoadFromFile.setText("Load from File");
        btnLoadFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadFromFileActionPerformed(evt);
            }
        });

        btnSaveToFile.setText("Save to File");
        btnSaveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveToFileActionPerformed(evt);
            }
        });

        txtAddNewName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddNewNameActionPerformed(evt);
            }
        });

        txtAddNewRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddNewRatingActionPerformed(evt);
            }
        });

        btnAddPlayerToDatabase.setText("Add Player");
        btnAddPlayerToDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPlayerToDatabaseActionPerformed(evt);
            }
        });

        labelName.setText("Name:");

        labelRating.setText("Rating;");

        btnAddPlayerToTournament.setText("Add Player to Tournament");
        btnAddPlayerToTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPlayerToTournamentActionPerformed(evt);
            }
        });

        btnDeletePlayer.setText("Delete Player");
        btnDeletePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePlayerActionPerformed(evt);
            }
        });

        btnEditPlayer.setText("Edit Player");
        btnEditPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPlayerActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAllPlayersLayout = new javax.swing.GroupLayout(pnlAllPlayers);
        pnlAllPlayers.setLayout(pnlAllPlayersLayout);
        pnlAllPlayersLayout.setHorizontalGroup(
            pnlAllPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAllPlayersLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAllPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAllPlayersLayout.createSequentialGroup()
                        .addGap(0, 2, Short.MAX_VALUE)
                        .addGroup(pnlAllPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAllPlayersLayout.createSequentialGroup()
                                .addComponent(labelName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAddNewName, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlAllPlayersLayout.createSequentialGroup()
                                .addComponent(labelRating)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAddNewRating, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(19, 19, 19))
                    .addGroup(pnlAllPlayersLayout.createSequentialGroup()
                        .addGroup(pnlAllPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAllPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnLoadFromFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSaveToFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAddPlayerToTournament, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                .addComponent(btnDeletePlayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAddPlayerToDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEditPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlAllPlayersLayout.setVerticalGroup(
            pnlAllPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAllPlayersLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(pnlAllPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAddNewName, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelName))
                .addGap(18, 18, 18)
                .addGroup(pnlAllPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRating)
                    .addComponent(txtAddNewRating, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnAddPlayerToDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeletePlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddPlayerToTournament, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLoadFromFile, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSaveToFile, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        JTabbedPane.addTab("All Players", pnlAllPlayers);

        tblTournament.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Name", "ID", "Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTournament);
        if (tblTournament.getColumnModel().getColumnCount() > 0) {
            tblTournament.getColumnModel().getColumn(0).setPreferredWidth(40);
            tblTournament.getColumnModel().getColumn(1).setPreferredWidth(160);
        }

        labelPlayers.setText("Players");

        btnStartNewTournament.setText("Start New Tournament");
        btnStartNewTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartNewTournamentActionPerformed(evt);
            }
        });

        txtRounds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRoundsActionPerformed(evt);
            }
        });

        lblRounds.setText("Rounds");

        btnEndTournament.setText("End Tournament");

        btnAddAllPlayersToTournament.setText("<html><center>"+"Add All Players To"+"<br>"+"Tournament (Debug)"+"</center></html>");
        btnAddAllPlayersToTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAllPlayersToTournamentActionPerformed(evt);
            }
        });

        checkIsRated.setText("Rated");
        checkIsRated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkIsRatedActionPerformed(evt);
            }
        });

        RemovePlayerFromTournament.setText("Remove Player ");
        RemovePlayerFromTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemovePlayerFromTournamentActionPerformed(evt);
            }
        });

        btnLoadTournamentFromFile.setText("Load from File");
        btnLoadTournamentFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadTournamentFromFileActionPerformed(evt);
            }
        });

        btnSave.setText("Save to File");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPlayersLayout = new javax.swing.GroupLayout(pnlPlayers);
        pnlPlayers.setLayout(pnlPlayersLayout);
        pnlPlayersLayout.setHorizontalGroup(
            pnlPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPlayersLayout.createSequentialGroup()
                .addGroup(pnlPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPlayersLayout.createSequentialGroup()
                        .addComponent(checkIsRated)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPlayersLayout.createSequentialGroup()
                        .addGap(0, 7, Short.MAX_VALUE)
                        .addGroup(pnlPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(RemovePlayerFromTournament, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAddAllPlayersToTournament, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                            .addComponent(btnLoadTournamentFromFile, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(72, 72, 72))
                    .addGroup(pnlPlayersLayout.createSequentialGroup()
                        .addGroup(pnlPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnStartNewTournament, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRounds, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtRounds)
                            .addComponent(btnEndTournament, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlPlayersLayout.setVerticalGroup(
            pnlPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPlayersLayout.createSequentialGroup()
                .addComponent(labelPlayers, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlPlayersLayout.createSequentialGroup()
                .addComponent(btnAddAllPlayersToTournament, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnLoadTournamentFromFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RemovePlayerFromTournament, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRounds, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtRounds, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkIsRated)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnStartNewTournament, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                .addGap(26, 26, 26)
                .addComponent(btnEndTournament, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        JTabbedPane.addTab("Tournament", pnlPlayers);

        tblPairings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "White", "Result", "Black"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPairings);
        if (tblPairings.getColumnModel().getColumnCount() > 0) {
            tblPairings.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblPairings.getColumnModel().getColumn(1).setResizable(false);
            tblPairings.getColumnModel().getColumn(1).setPreferredWidth(40);
            tblPairings.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        btnPair.setText("Pair");
        btnPair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPairActionPerformed(evt);
            }
        });

        buttonGroup1.add(btnWhiteWin);
        btnWhiteWin.setText("White Won");
        btnWhiteWin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWhiteWinActionPerformed(evt);
            }
        });

        buttonGroup1.add(btnBlackWin);
        btnBlackWin.setText("Black Won");

        buttonGroup1.add(btnDraw);
        btnDraw.setText("Draw");

        btnSetResult.setText("Set Result");
        btnSetResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetResultActionPerformed(evt);
            }
        });

        btnEndRound.setText("End Round");
        btnEndRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEndRoundActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPairingsLayout = new javax.swing.GroupLayout(pnlPairings);
        pnlPairings.setLayout(pnlPairingsLayout);
        pnlPairingsLayout.setHorizontalGroup(
            pnlPairingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPairingsLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(pnlPairingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnWhiteWin)
                    .addComponent(btnBlackWin)
                    .addComponent(btnDraw)
                    .addComponent(btnSetResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEndRound, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                .addGap(0, 49, Short.MAX_VALUE))
        );
        pnlPairingsLayout.setVerticalGroup(
            pnlPairingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPairingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE))
            .addGroup(pnlPairingsLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnWhiteWin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBlackWin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDraw)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSetResult, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnPair, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEndRound, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        JTabbedPane.addTab("Pairings", pnlPairings);

        tblStandings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Name", "Rating", "Score", "History"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblStandings);
        if (tblStandings.getColumnModel().getColumnCount() > 0) {
            tblStandings.getColumnModel().getColumn(0).setPreferredWidth(40);
            tblStandings.getColumnModel().getColumn(1).setPreferredWidth(160);
            tblStandings.getColumnModel().getColumn(4).setPreferredWidth(300);
        }

        labelStandingsCurrentRound.setText("Standings - Round");

        btnPrint.setText("Print Standings to PDF");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlStandingsLayout = new javax.swing.GroupLayout(pnlStandings);
        pnlStandings.setLayout(pnlStandingsLayout);
        pnlStandingsLayout.setHorizontalGroup(
            pnlStandingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
            .addGroup(pnlStandingsLayout.createSequentialGroup()
                .addComponent(labelStandingsCurrentRound, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlStandingsLayout.setVerticalGroup(
            pnlStandingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStandingsLayout.createSequentialGroup()
                .addGroup(pnlStandingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelStandingsCurrentRound, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlStandingsLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(btnPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        JTabbedPane.addTab("Standings", pnlStandings);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JTabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * @param  
     * 
     * Clears the old Pairings table.
     * 
     * Generates a new pairing for the tournament.
     * 
     * Then, updates the Pairings table with the pairing.
     * 
     */
    private void btnPairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPairActionPerformed
        // TODO add your handling code here:
        clearMatchupModel();
        
        tournament.restart();

        String filePath = "matchup";
        File file = new File(filePath);
        
        try{
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
        } catch (IOException e) {
            return;
        }
        
        Round matching = tournament.pair();

        DefaultTableModel tblModel = (DefaultTableModel) tblPairings.getModel();
        
        for (int i = 0; i < matching.getMatches().size(); i++) {
            Game game = matching.getMatches().get(i);
            String player1Name = game.getWhitePlayer().getName();
            String player2Name = game.getBlackPlayer().getName();

            if(player2Name.equals("BYE")){
                String[] row = {player1Name, "1-0", player2Name};
                tblModel.addRow(row);
            }
            else if(player1Name.equals("BYE")) {
                String[] row = {player1Name, "0-1", player2Name};
                tblModel.addRow(row);
            }
            else{
                String[] row = {player1Name, "*", player2Name};
                tblModel.addRow(row);
            }
        }
        
    
    }//GEN-LAST:event_btnPairActionPerformed

    private void txtAddNewRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddNewRatingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddNewRatingActionPerformed

    /**
     * 
     * @param evt 
     * Can be run when the Add Player button is clicked.
     * There must be a name, and the rating must be an integer.
     * Adds the information from the Name and Rating fields into the AllPlayers table. 
     * 
     */
    private void btnAddPlayerToDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPlayerToDatabaseActionPerformed
        // TODO add your handling code here:
        String name = txtAddNewName.getText();
        String rating = txtAddNewRating.getText();
        
        if(name.equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter a name. If the player has a rating, enter a rating as well.");
        } else {
            if(!rating.equals("")) {
                try {
                    Integer.parseInt(rating);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Rating must be an integer.");
                    return;
                }
            }

            int maxID = 0;
            for(int i = 0; i < tblAllPlayers.getRowCount(); i++){
               maxID = Math.max(maxID, Integer.parseInt(tblAllPlayers.getValueAt(i, 1).toString()));
            }
            
            String[] data = {name, Integer.toString(maxID + 1), rating};
            
            DefaultTableModel tblModel = (DefaultTableModel) tblAllPlayers.getModel();
            tblModel.addRow(data);
            //JOptionPane.showMessageDialog(this, "Add Data Successfully..!");
            txtAddNewName.setText("");
            txtAddNewRating.setText("");
        }
    }//GEN-LAST:event_btnAddPlayerToDatabaseActionPerformed

    
    /**
     * 
     * @param evt 
     * Can be run when the Add Player to Tournament button is clicked.
     * 
     * Adds the player to the Tournament table. Will warn the user if the player already exists in the Tournament table.
     */
    private void btnAddPlayerToTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPlayerToTournamentActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel tblModel = (DefaultTableModel) tblAllPlayers.getModel();
        DefaultTableModel tblModelTournament = (DefaultTableModel) tblTournament.getModel();
        if (tblAllPlayers.getSelectedRowCount() == 1) {
            
            //Add a row already sorted by rank. Online insertion sort
            int x = tblAllPlayers.getSelectedRow();
            int xID = Integer.parseInt(tblModel.getValueAt(x, 1).toString());
            
            for(int i = 0; i < tblTournament.getRowCount(); i++) {
                if(Integer.parseInt(tblTournament.getValueAt(i, 2).toString()) == xID) {
                    JOptionPane.showMessageDialog(this, "This player has already been added to the tournament.");
                    return;
                }
            }
            onlineInsertPlayer();
        }else{
            JOptionPane.showMessageDialog(this, "Please select a single row to add to the tournament.");
        }
    }//GEN-LAST:event_btnAddPlayerToTournamentActionPerformed

    /**
     * Adds the player selected in the AllPlayers table to the Tournament table in its correct position when sorted by rating.\
     */
    private void onlineInsertPlayer() {
        
        DefaultTableModel tblModel = (DefaultTableModel) tblAllPlayers.getModel();
        DefaultTableModel tblModelTournament = (DefaultTableModel) tblTournament.getModel();
        
        int x = tblAllPlayers.getSelectedRow();
        int y = tblTournament.getRowCount();
        String[] arr = {Integer.toString(y + 1), tblModel.getValueAt(x, 0).toString(), tblModel.getValueAt(x, 1).toString(), tblModel.getValueAt(x, 2).toString()};
        
        tblModelTournament.addRow(arr);
        
        int moveToIndex = y;
        for(int i = y; i > 0; i--) {
            if(Integer.parseInt(tblTournament.getValueAt(y, 3).toString()) <= Integer.parseInt(tblTournament.getValueAt(i-1, 3).toString())) {
                break;
            }
            
            moveToIndex--;
        }
        
        tblModelTournament.moveRow(y, y, moveToIndex);
        
        for(int i = 0; i <= y; i++) {
            tblModelTournament.setValueAt(i+1, i, 0);
        }
    }
    
    /**
     * 
     * @param x 
     * 
     * Adds the player at index x in the AllPlayers table to the Tournament table in its correct position when sorted by rating.
     */
    private void onlineInsertPlayerByIndex(int x) {
        
        DefaultTableModel tblModel = (DefaultTableModel) tblAllPlayers.getModel();
        DefaultTableModel tblModelTournament = (DefaultTableModel) tblTournament.getModel();
        
        int y = tblTournament.getRowCount();
        String[] arr = {Integer.toString(y + 1), tblModel.getValueAt(x, 0).toString(), tblModel.getValueAt(x, 1).toString(), tblModel.getValueAt(x, 2).toString()};
        
        tblModelTournament.addRow(arr);
        
        int moveToIndex = y;
        for(int i = y; i > 0; i--) {
            if(Integer.parseInt(tblTournament.getValueAt(y, 3).toString()) <= Integer.parseInt(tblTournament.getValueAt(i-1, 3).toString())) {
                break;
            }
            
            moveToIndex--;
        }
        
        tblModelTournament.moveRow(y, y, moveToIndex);
        
        for(int i = 0; i <= y; i++) {
            tblModelTournament.setValueAt(i+1, i, 0);
        }
    }
    
    /**
     * 
     * @param evt 
     * 
     * Delete the selected player in the AllPlayers table.
     * 
     * If the table is empty, or if not exactly one row is selected, will warn the user.
     */
    private void btnDeletePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePlayerActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel) tblAllPlayers.getModel();
        if (tblAllPlayers.getSelectedRowCount() == 1) {
            tblModel.removeRow(tblAllPlayers.getSelectedRow());
        }else{
            if (tblAllPlayers.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(this, "Table is empty.");
            }else{
                    JOptionPane.showMessageDialog(this, "Please select a single row to delete.");
                }
        }
    }//GEN-LAST:event_btnDeletePlayerActionPerformed

    private void txtRoundsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRoundsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRoundsActionPerformed

    /**
     * 
     * @param evt 
     * 
     * Can be called when the Start New Tournament button is clicked with the Rounds field filled with an integer.
     * 
     * Replaces the current instance of tournament with a new Tournament with the given number of rounds.
     * Creates a Player object for each entry in the Tournament table and adds that player to the tournament.
     * Creates an entry in the Standings table for each Player.
     */
    private void btnStartNewTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartNewTournamentActionPerformed
        // TODO add your handling code here:
        
        
        //Check rounds #
        
        String strNumberOfRounds = txtRounds.getText();
        int a;
        
        try {
            a = Integer.parseInt(strNumberOfRounds);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please insert a number of rounds.");
            return;
        }
        
        reset();
        
        //Create all the players
        
        
        int numberOfPlayersInTournament = tblTournament.getRowCount();
    
        tournament = new Tournament(Integer.parseInt(strNumberOfRounds), numberOfPlayersInTournament);

        ArrayList<Player> players = new ArrayList<Player>();
        
        for(int i = 0; i < tblTournament.getRowCount(); i++) {
            Player newPlayer = new Player(Integer.parseInt(tblTournament.getValueAt(i, 2).toString()), tblTournament.getValueAt(i, 1).toString(), Integer.parseInt(tblTournament.getValueAt(i, 3).toString()));
            
            players.add(newPlayer);
        }
        
        tournament.players = players;
        
        //tournament.rounds[0] = new Round(1);
        
        
        
        DefaultTableModel tblModelTournament = (DefaultTableModel) tblTournament.getModel();
        DefaultTableModel tblModelStandings = (DefaultTableModel) tblStandings.getModel();

        for(int i = 0; i < tblModelTournament.getRowCount(); i++) {
            tblModelStandings.addRow(new Object[5]);
            tblModelStandings.setValueAt(tblModelTournament.getValueAt(i, 1), i, 1);
            tblModelStandings.setValueAt(tblModelTournament.getValueAt(i, 0), i, 0);
            tblModelStandings.setValueAt(tblModelTournament.getValueAt(i, 3), i, 2);
            tblModelStandings.setValueAt(0.0, i, 3);

        }

    }//GEN-LAST:event_btnStartNewTournamentActionPerformed

    /**
     * 
     * @param evt 
     * 
     * Replaces tbe information of the player selected in the AllPlayers table with the information given in the Name and Rating fields.
     */
    private void btnEditPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPlayerActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel tblModel = (DefaultTableModel) tblAllPlayers.getModel();
        if (tblAllPlayers.getSelectedRowCount() == 1) {
            String name = txtAddNewName.getText();
            String rating = txtAddNewRating.getText();
            if (name.equals("")){
                JOptionPane.showMessageDialog(this, "Please enter a name.");
            } else {
                if(!rating.equals("")) {
                    try {
                        Integer.parseInt(rating);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Rating must be an integer.");
                        return;
                    }   
                }
                tblModel.setValueAt(name, tblAllPlayers.getSelectedRow(), 0);
                tblModel.setValueAt(rating, tblAllPlayers.getSelectedRow(), 2);

                ///JOptionPane.showMessageDialog(this, "Update Data Successfully..!");
                txtAddNewName.setText("");
                txtAddNewRating.setText("");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Please select single row to Edit.");
        }

    }//GEN-LAST:event_btnEditPlayerActionPerformed

    private void txtAddNewNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddNewNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddNewNameActionPerformed

    /**
     * 
     * @param evt 
     * 
     * Called when an entry in the AllPlayers table is selected. Places its information into the Name and Rating fields.
     */
    private void tblAllPlayersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAllPlayersMouseClicked
        // TODO add your handling code here:
        
        DefaultTableModel tblModel = (DefaultTableModel) tblAllPlayers.getModel();

	String name = tblModel.getValueAt(tblAllPlayers.getSelectedRow(), 0).toString();
	String rating = tblModel.getValueAt(tblAllPlayers.getSelectedRow(), 2).toString();

	txtAddNewName.setText(name);
	txtAddNewRating.setText(rating);
    }//GEN-LAST:event_tblAllPlayersMouseClicked

    private void btnLoadFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadFromFileActionPerformed
        // TODO add your handling code here:
        clearPlayerModel();
        String filePath = "allPlayers";
        File file = new File(filePath);
        try{
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            DefaultTableModel tblModel = (DefaultTableModel) tblAllPlayers.getModel();
            Object[] lines = br.lines().toArray();
            
            for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split(",");
                tblModel.addRow(row);
            }

            br.close();
            fr.close();
        } catch (IOException e){
        
        }
        
        
    }//GEN-LAST:event_btnLoadFromFileActionPerformed

    private void btnSaveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveToFileActionPerformed
        // TODO add your handling code here:
        
        String filePath = "allPlayers";
        File file = new File(filePath);
        try{
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);

                for(int i = 0; i < tblAllPlayers.getRowCount(); i++){
                    for(int j = 0; j < tblAllPlayers.getColumnCount(); j++){
                            bw.write(tblAllPlayers.getValueAt(i,j).toString()+",");
                        }
                    bw.newLine();
                }

                bw.close();
                fw.close();
        } catch (IOException e){
            
        }
    }//GEN-LAST:event_btnSaveToFileActionPerformed

    private void btnAddAllPlayersToTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAllPlayersToTournamentActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel) tblAllPlayers.getModel();
        DefaultTableModel tblModelTournament = (DefaultTableModel) tblTournament.getModel();

        for(int x = 0; x < tblAllPlayers.getRowCount(); x++) {
            //Add a row already sorted by rank. Online insertion sort
           // int x = tblAllPlayers.getSelectedRow();
            int xID = Integer.parseInt(tblModel.getValueAt(x, 1).toString());
            
            for(int i = 0; i < tblTournament.getRowCount(); i++) {
                if(Integer.parseInt(tblTournament.getValueAt(i, 2).toString()) == xID) {
                    JOptionPane.showMessageDialog(this, "This player has already been added to the tournament.");
                    return;
                }
            }
            onlineInsertPlayerByIndex(x);
        }
        
    }//GEN-LAST:event_btnAddAllPlayersToTournamentActionPerformed

    private void btnSetResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetResultActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel tblModel = (DefaultTableModel) tblPairings.getModel();
        if (tblPairings.getSelectedRowCount() == 1) {
            //tblModel.removeRow(tblMatchup.getSelectedRow());

            if ( !tblModel.getValueAt(tblPairings.getSelectedRow(), 0).equals("BYE") &&
                !tblModel.getValueAt(tblPairings.getSelectedRow(), 1).equals("BYE")){
                if(btnWhiteWin.isSelected() == true) {
                    tblModel.setValueAt("1-0", tblPairings.getSelectedRow(), 1);
                }
                else if(btnBlackWin.isSelected() == true) {
                    tblModel.setValueAt("0-1", tblPairings.getSelectedRow(), 1);
                }
                else if(btnDraw.isSelected() == true) {
                    tblModel.setValueAt("1/2-1/2", tblPairings.getSelectedRow(), 1);
                }
            }
        }else{
            if (tblPairings.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Table is Empty.");
            }else{
                JOptionPane.showMessageDialog(this, "Please select a single row to set its result.");
            }
        }
    }//GEN-LAST:event_btnSetResultActionPerformed

    private void btnWhiteWinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWhiteWinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnWhiteWinActionPerformed

    private void btnEndRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndRoundActionPerformed
        // TODO add your handling code here:
        
        //Disable this button and the other button
        
        //Update the standings
        
        //Todo: Add to player's HISTORY
        DefaultTableModel tblModelPairings = (DefaultTableModel) tblPairings.getModel();
        DefaultTableModel tblModelStandings = (DefaultTableModel) tblStandings.getModel();
        
        Round r = tournament.getCurrentRoundData();

        for(int i = 0; i < tblPairings.getRowCount(); i++) {
            Game game = r.getMatches().get(i);
            int result = 0;
            if(tblPairings.getValueAt(i, 1).equals("1-0")) {
                game.setResult(1);
                result = game.getResult();
            } else if(tblPairings.getValueAt(i, 1).equals("0-1")) {
                game.setResult(2);
                result = game.getResult();
            } else {
                game.setResult(3);
                result = game.getResult();
                
            }
            
            game.getWhitePlayer().updateResult(result, game.getBlackPlayer().getID(), 1);
            game.getBlackPlayer().updateResult(result, game.getWhitePlayer().getID(), 2);
        }
        
        
        updateStandings();
        
        labelStandingsCurrentRound.setText("Standings - Round " + tournament.getCurrentRound());
        //Save Pairings and Standings to a file
        
        
    }//GEN-LAST:event_btnEndRoundActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        try {
            // TODO add your handling code here:
            tblStandings.print();
        } catch (PrinterException ex) {
            
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String name = txtAddNewName.getText();
        String rating = txtAddNewRating.getText();
        
        if(name.equals("") && rating.equals("")) {
            JOptionPane.showMessageDialog(this, "Input a name or a rating.");
        } else if(name.equals("")) {
            searchByRating();
        } else if(rating.equals("")) {
            searchByName();
        } else {
            searchByNameAndRating();
        }
        
        //JOptionPane.showMessageDialog(this, "It's not working yet");
    }//GEN-LAST:event_btnSearchActionPerformed

    private void checkIsRatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkIsRatedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkIsRatedActionPerformed

    private void btnLoadTournamentFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadTournamentFromFileActionPerformed
        // TODO add your handling code here:
        
        String filePath = "standings";
        File file = new File(filePath);
        
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            
            String[] arr = br.readLine().split(",");
            int[] arr2 = new int[arr.length];
            
            for(int i = 0; i < 2; i++) {
                arr2[i] = Integer.parseInt(arr[i]);
            }
            tournament = new Tournament(arr2[0], arr2[1]);
            
            //Create a player for each player in the file
            
            
            //Put them into the Standings page
            
            
            //Put them into the Tournament table
            
            
            
        } catch (IOException e) {
            
        }
    }//GEN-LAST:event_btnLoadTournamentFromFileActionPerformed

    private void RemovePlayerFromTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemovePlayerFromTournamentActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel tblModel = (DefaultTableModel) tblTournament.getModel();
        if (tblTournament.getSelectedRowCount() == 1) {
            tblModel.removeRow(tblTournament.getSelectedRow());
        }else{
            if (tblTournament.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(this, "Table is empty.");
            }else{
                    JOptionPane.showMessageDialog(this, "Please select a single row to delete.");
                }
        }
    }//GEN-LAST:event_RemovePlayerFromTournamentActionPerformed

    /**
     * 
     * @param evt 
     * 
     * Saves the standings tournament to a file, effectively saving the entire tournament except for the pairings.
     */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        String filePath = "standings";
        File file = new File(filePath);
        
        try{
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            
            bw.write(tournament.getNumberOfPlayers() + "," + tournament.getNumberOfRounds());
            bw.newLine();
            for(int i = 0; i < tblStandings.getRowCount(); i++){
                bw.write(tournament.players.get(i).getID() + ",");
                
                for(int j = 1; j < tblStandings.getColumnCount(); j++){
                    if(isNull(tblStandings.getValueAt(i, j))) {
                        bw.write(",");
                    } else {
                        bw.write(tblStandings.getValueAt(i,j).toString()+",");
                    }
                }
                bw.newLine();
            }

            bw.close();
            fw.close();
        } catch (IOException e){
            
        }
    }//GEN-LAST:event_btnSaveActionPerformed
    
    /**
     * Look for the name and highlight it if it finds it
     */
    private void searchByName() {
        String name = txtAddNewName.getText();
        
        int test = tblAllPlayers.getSelectedRow();
        
        for(int i = test + 1; i < tblAllPlayers.getRowCount(); i++) {
            if(tblAllPlayers.getValueAt(i, 0).equals(name)) {
                tblAllPlayers.setRowSelectionInterval(i, i);
                return;
            }
        }
        for(int i = 0; i < test; i++) {
            if(tblAllPlayers.getValueAt(i, 0).equals(name)) {
                tblAllPlayers.setRowSelectionInterval(i, i);
                return;
            }
        }
    }
    
    /**
     * Look for the closest rating
     */
    private void searchByRating() {
        int rating = Integer.parseInt(txtAddNewRating.getText());
        
        int test = tblAllPlayers.getSelectedRow();
        
        int minimumRatingDistanceIndex = -1;
        for(int i = 0; i < tblAllPlayers.getRowCount(); i++) {
            if(i == test) continue;
            
            if(minimumRatingDistanceIndex == -1) {
                minimumRatingDistanceIndex = i;
                continue;
            }
            
            if(Math.abs(rating - Integer.parseInt(tblAllPlayers.getValueAt(i, 2).toString())) < 
                    Math.abs(rating - Integer.parseInt(tblAllPlayers.getValueAt(minimumRatingDistanceIndex, 2).toString()))) {
                minimumRatingDistanceIndex = i;
            }
        }
        
        tblAllPlayers.setRowSelectionInterval(minimumRatingDistanceIndex, minimumRatingDistanceIndex);

    }
    
    /**
     * Closest rating of all people with that name
     */
    private void searchByNameAndRating() {
        String name = txtAddNewName.getText();
        int rating = Integer.parseInt(txtAddNewRating.getText());
        int test = tblAllPlayers.getSelectedRow();

        int minimumRatingDistanceIndex = -1;
        for(int i = 0; i < tblAllPlayers.getRowCount(); i++) {
            if(i == test) continue;
            
            if(!(name.equals(tblAllPlayers.getValueAt(i, 0)))) {
                continue;
            }
            
            if(minimumRatingDistanceIndex == -1) {
                minimumRatingDistanceIndex = i;
                continue;
            }
            
            if(Math.abs(rating - Integer.parseInt(tblAllPlayers.getValueAt(i, 2).toString())) < Math.abs(rating - Integer.parseInt(tblAllPlayers.getValueAt(minimumRatingDistanceIndex, 2).toString()))) {
                minimumRatingDistanceIndex = i;
            }
        }
        
        if(minimumRatingDistanceIndex == -1) {
            JOptionPane.showMessageDialog(this, "No players with this name and rating.");
        } else {
            tblAllPlayers.setRowSelectionInterval(minimumRatingDistanceIndex, minimumRatingDistanceIndex);
        }
    }
    
    private void updateStandings() {
        clearStandingModel();
        
        Collections.sort(tournament.players);
        
        DefaultTableModel tblModelStandings = (DefaultTableModel) tblStandings.getModel();
        
        int count = 1;
        for(int i = tournament.getNumberOfPlayers() - 1; i >= 0; i--) {
            String[] arr = new String[5];
            arr[0] = Integer.toString(count);
            
            arr[1] = tournament.players.get(i).getName();
            arr[2] = Integer.toString(tournament.players.get(i).getRating());
            arr[3] = Double.toString(tournament.players.get(i).currentScore);
            arr[4] = "";
                
            tblModelStandings.addRow(arr);
            count++;
        }
        
        count = 1;
        for(int i = tournament.getNumberOfPlayers() - 1; i >= 0; i--) {
            
            String history = "";
            
            for(Result j : tournament.players.get(i).results) {
                // loop for the opponent id
                
                int opponentRank = 0;
                int count2 = 1;
                for(int k = tournament.getNumberOfPlayers() - 1; k >= 0; k--) {
                    if(tournament.players.get(k).getID() == j.opponentID) {
                        opponentRank = count2;
                        break;
                    }
                    
                    count2++;
                }
                
                String str = j.toString();
                
                str += opponentRank;
                
                str += " ";
                
                history += str;
            }
            
            tblModelStandings.setValueAt(history, count - 1, 4);
            count++;
        }

    }
    
    private void clearPlayerModel(){
            DefaultTableModel tblModel = (DefaultTableModel) tblAllPlayers.getModel();
            if(tblModel.getRowCount() != 0){
                for (int i = tblModel.getRowCount(); i > 0; i--)
                    tblModel.removeRow(i-1);
            } 
    }
    private void clearTournamentModel(){
            DefaultTableModel tblModel = (DefaultTableModel) tblTournament.getModel();
            if(tblModel.getRowCount() != 0){
                for (int i = tblModel.getRowCount(); i > 0; i--)
                    tblModel.removeRow(i-1);
            } 
    }
    private void clearMatchupModel(){
            DefaultTableModel tblModel = (DefaultTableModel) tblPairings.getModel();
            if(tblModel.getRowCount() != 0){
                for (int i = tblModel.getRowCount(); i > 0; i--)
                    tblModel.removeRow(i-1);
            } 
    }

    private void clearStandingModel(){
            DefaultTableModel tblModel = (DefaultTableModel) tblStandings.getModel();
            if(tblModel.getRowCount() != 0){
                for (int i = tblModel.getRowCount(); i > 0; i--)
                    tblModel.removeRow(i-1);
            } 
    }

    private void reset(){
    //clear matchup.xml and history.txt
        String filePath = "matchup";
        File file = new File(filePath);

        String filePath2 = "history";
        File file2 = new File(filePath2);

        String filePath3 = "standings";
        File file3 = new File(filePath3);

        try{
            FileWriter fw1 = new FileWriter(file);
            BufferedWriter bw1 = new BufferedWriter(fw1);
            bw1.close();
            fw1.close();

            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.close();
            fw.close();

            FileWriter fw3 = new FileWriter(file3);
            BufferedWriter bw3 = new BufferedWriter(fw3);
            bw3.close();
            fw3.close();

            clearMatchupModel();
            clearStandingModel();

        } catch (IOException ex){
            //Logger.getLogger();
           // LOGGER.warning(ex.getMessage());
            //JOptionPane.showMessageDialog(this, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChessUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                ChessUI jframe = new ChessUI();
                jframe.setTitle("Chess Pairing Software");
                jframe.setResizable(false);
                jframe.setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane JTabbedPane;
    private javax.swing.JButton RemovePlayerFromTournament;
    private javax.swing.JButton btnAddAllPlayersToTournament;
    private javax.swing.JButton btnAddPlayerToDatabase;
    private javax.swing.JButton btnAddPlayerToTournament;
    private javax.swing.JRadioButton btnBlackWin;
    private javax.swing.JButton btnDeletePlayer;
    private javax.swing.JRadioButton btnDraw;
    private javax.swing.JButton btnEditPlayer;
    private javax.swing.JButton btnEndRound;
    private javax.swing.JButton btnEndTournament;
    private javax.swing.JButton btnLoadFromFile;
    private javax.swing.JButton btnLoadTournamentFromFile;
    private javax.swing.JButton btnPair;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveToFile;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSetResult;
    private javax.swing.JButton btnStartNewTournament;
    private javax.swing.JRadioButton btnWhiteWin;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JCheckBox checkIsRated;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelPlayers;
    private javax.swing.JLabel labelRating;
    private javax.swing.JLabel labelStandingsCurrentRound;
    private javax.swing.JLabel lblRounds;
    private javax.swing.JPanel pnlAllPlayers;
    private javax.swing.JPanel pnlPairings;
    private javax.swing.JPanel pnlPlayers;
    private javax.swing.JPanel pnlStandings;
    private javax.swing.JTable tblAllPlayers;
    private javax.swing.JTable tblPairings;
    private javax.swing.JTable tblStandings;
    private javax.swing.JTable tblTournament;
    private javax.swing.JTextField txtAddNewName;
    private javax.swing.JTextField txtAddNewRating;
    private javax.swing.JTextField txtRounds;
    // End of variables declaration//GEN-END:variables
}
